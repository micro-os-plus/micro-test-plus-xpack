# -----------------------------------------------------------------------------
#
# This file is part of the ÂµOS++ distribution.
#   (https://github.com/micro-os-plus/)
# Copyright (c) 2022 Liviu Ionescu
#
# Permission to use, copy, modify, and/or distribute this software
# for any purpose is hereby granted, under the terms of the MIT license.
#
# If a copy of the license was not distributed with this file, it can
# be obtained from https://opensource.org/licenses/MIT/.
#
# -----------------------------------------------------------------------------

# Definitions required for compiling all files, thus the use of
# add_global_*() functions.
# Must be added with subdir() before creating any library or executable.

message('Including platform-native common definitions...')

# -----------------------------------------------------------------------------

xpack_platform_compile_definition = 'MICRO_OS_PLUS_PLATFORM_NATIVE'

# -----------------------------------------------------------------------------

xpack_platform_common_args = []
xpack_platform_common_c_args = []
xpack_platform_common_cpp_args = []
xpack_platform_compile_definitions = []

xpack_platform_compile_definitions += [
  '-D' + xpack_platform_compile_definition,
]

if c_compiler.get_id().contains('clang') and build_machine.system() == 'darwin'
  # On macOS enabling the macro fails with:
  # error: unknown type name 'u_int'
else
  xpack_platform_compile_definitions += [
    # Full POSIX conformance:
    # https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap02.html#tag_02_01_03
    '-D_POSIX_C_SOURCE=200809L',
  ]
endif

if c_compiler.get_id().contains('clang') and build_machine.system() == 'windows'
  xpack_platform_common_args += [
    '-Wno-used-but-marked-unused',
  ]
endif

if get_option('buildtype') == 'release' or get_option('buildtype') == 'minsize' or get_option('buildtype') == 'debugoptimized'
  # https://mesonbuild.com/Reference-tables.html#operating-system-names
  # message(build_machine.cpu())
  # Match armv[78]l.
  if c_compiler.get_id().contains('clang') and build_machine.system() == 'linux' and build_machine.cpu().contains('armv')
    # clang-12: error: unable to execute command: Segmentation fault
    # clang-12: error: linker command failed due to signal (use -v to see invocation)
  else
    # meson-out/sample-test.p/.._src_sample-test.cpp.o: file not recognized: file format not recognized
    xpack_platform_common_args += [
      '-flto',
    ]
  endif
endif

xpack_platform_common_args += [
  '-Werror',
]

if build_machine.system() == 'darwin'
  xpack_platform_common_args += [
    '-Wno-missing-include-dirs',
  ]
endif

add_global_arguments(
  xpack_platform_common_args + xpack_platform_common_c_args + xpack_platform_compile_definitions,

  language: [ 'c' ]
)

add_global_arguments(
  xpack_platform_common_args + xpack_platform_common_cpp_args + xpack_platform_compile_definitions,

  language: [ 'cpp' ]
)

foreach xn : xpack_platform_common_args + xpack_platform_common_c_args + xpack_platform_common_cpp_args + xpack_platform_compile_definitions
  message('G+ ' + xn)
endforeach

# When `-flto` is used, the compile options must be passed to the linker too.
add_global_link_arguments(
  xpack_platform_common_args + xpack_platform_common_c_args,

  language: [ 'c' ]
)

# When `-flto` is used, the compile options must be passed to the linker too.
add_global_link_arguments(
  xpack_platform_common_args + xpack_platform_common_cpp_args,

  language: [ 'cpp' ]
)

# -----------------------------------------------------------------------------

# The base folder is tests. The order is significative.
xpack_dependencies = [

  'xpacks/@micro-os-plus/diag-trace', # -

  xpack_build_folder_relative_path + '/xpacks/@micro-os-plus/architecture-synthetic-posix', # (architecture) -
]

# -----------------------------------------------------------------------------
