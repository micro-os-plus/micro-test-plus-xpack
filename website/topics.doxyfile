/*
 * This file is part of the µOS++ distribution.
 *   (https://github.com/micro-os-plus/)
 * Copyright (c) 2021 Liviu Ionescu.
 *
 * Permission to use, copy, modify, and/or distribute this software
 * for any purpose is hereby granted, under the terms of the MIT license.
 *
 * If a copy of the license was not distributed with this file, it can
 * be obtained from <https://opensource.org/licenses/MIT/>.
 */

// Not really a .doxyfile, since it does not define variables.
// But also it cannot be .md, since Doxygen renders markdown files
// as extra entries in the sidebar. Suggestions welcomed!

-------------------------------------------------------------------------------
/**

@defgroup mtp µTest++

*/
-------------------------------------------------------------------------------
/**

@defgroup mtp-cpp-api C++ API
@ingroup mtp
@details

The µTest++ implementation uses extensively modern C++ features.
Aiming simplicity, µTest++ provides only a limited number of primitives
used to check expectations and assumptions.

There are no preprocessor macros, all primitives are implemented in C++.

*/
-------------------------------------------------------------------------------
/**

@defgroup mtp-c-api C API
@ingroup mtp
@details

The µTest++ can be used to test C code without problems, but
its implementation uses extensively modern C++ features which
cannot be implemented in C.

Thus, there are no C equivalents for the C++ definitions.

*/
-------------------------------------------------------------------------------
/**

@defgroup mtp-cli Command line options
@ingroup mtp
@details

### Verbosity

By default, the test reporter shows detailed results only for the failed
test cases; successful test cases are shown as a single line with
the total counts of passed/failed checks.

To control the verbosity, use one of the following command line options:

- `--verbose` - show all expectations, regardless of the result
- `--quiet` - show only the test suite totals
- `--silent` - suppress all output and only return the exit code

*/
-------------------------------------------------------------------------------
/**

@addtogroup mtp-cpp-api
@{

*/
-------------------------------------------------------------------------------
/**

@defgroup mtp-top Initialisation & exit
@brief Functions to initialise the framework and exit.
@details

These are functions to initialise the test runner, to define
test cases, and to
return the test result as the process exit code.

The absolute minimal test has a single test case, with a single expectation;
for example:

```cpp
#include <micro-os-plus/micro-test-plus.h>

int
main(int argc, char* argv[])
{
  using namespace micro_os_plus::micro_test_plus;

  initialize(argc, argv, "Minimal");

  test_case ("Check truth", [] {
    expect (true);
  })

  return exit_code ();
}
```

When running this test, the output looks like:

```console
• Minimal - test suite started

  ✓ Check truth - test case passed (1 check)

✓ Minimal - test suite passed (1 check in 1 test case)
```

*/
-------------------------------------------------------------------------------
/**

@defgroup mtp-test-case Test cases
@brief  Test cases are named sequences of checks.
@details

Test cases group several checks done in the same environment.

There can be any number of test cases, and each test case is performed
by invoking a function, parametrised with a name/description,
a callable (usually a lambda), and optional arguments.

@par Examples

```cpp
using namespace micro_os_plus::micro_test_plus;

test_case ("Check various conditions", [] {
  expect (eq (compute_answer (), 42)) << "answer eq 42";
  expect (ne (compute_answer (), 43)) << "answer ne 43";
});

test_case ("Check various conditions with operators", [] {
  using namespace micro_os_plus::micro_test_plus::operators;
  using namespace micro_os_plus::micro_test_plus::literals;

  expect (compute_answer () == 42_i) << "answer == 42";
  expect (compute_answer () != 43_i) << "answer != 43";
});
```

*/
-------------------------------------------------------------------------------
/**

@defgroup mtp-expectations Expectations
@brief  Expectations are checks whose results are reported.
@details

Failed expectations report the failure but do not break the test
(as opposed to assumptions).

*/
-------------------------------------------------------------------------------
/**

@defgroup mtp-assumptions Assumptions
@brief  Assumptions are conditions that must be met for the test to continue.
@details

On failed assumptions, the test cannot continue and it is aborted on the spot.

*/
-------------------------------------------------------------------------------
/**

@defgroup mtp-function-comparators Function comparators
@brief  Functions to compare the actual with expected values.
@details

Expectations and assumptions can test any expression evaluating to
a boolean value, but in order to nicely report the difference between
expected and actual values in failed conditions, special comparators
must be used.

@par Examples
```cpp
expect (eq (compute_answer (), 42)) << "answer is 42";
expect (ne (compute_answer (), 43)) << "answer is not 43";
expect (lt (compute_answer (), 43)) << "answer is < 43";
expect (le (compute_answer (), 43)) << "answer is <= 42";
expect (gt (compute_answer (), 41)) << "answer is > 43";
expect (ge (compute_answer (), 42)) << "answer is >= 42";

expect (compute_condition ()) << "condition is true";
```

When such comparator functions are used, failed checks also display the
actual values compared during the test; for example:

```console
  Check failed comparisons
    ✗ actual != 42 FAILED (unit-test.cpp:286, 42 != 42)
    ✗ FAILED (unit-test.cpp:307, 42 != 42)
    ✗ 42 != 42_i FAILED (unit-test.cpp:310, 42 != 42)
    ✗ (actual == 42) and (actual != 42.0) FAILED (unit-test.cpp:781, (42 == 42 and 42.000000 != 42.000000))
```

## Comparing containers

Containers can be compared for equality. The comparison is done by iterating and comparing each member.

@par Examples

```cpp
expect (eq (std::vector<int>{ 1, 2 }, std::vector<int>{ 1, 2 }))
        << "vector{ 1, 2 } eq vector{ 1, 2 }";

expect (ne (std::vector<int>{ 1, 2, 3 }, std::vector<int>{ 1, 2, 4 })
        << "vector{ 1, 2, 3 } ne vector{ 1, 2, 4 }";
```

*/
-------------------------------------------------------------------------------
/**

@defgroup mtp-logical-function-operators Logical function operators
@brief  Functions to be used in logical expressions.
@details

Complex expressions can be checked in a single line, using the
logical `_and()`, `_or()` and `_not()` functions.

@note
The names are
prefixed with underscore since `and`, `or` and `not` are reserved words
in C/C++.

@par Example

```cpp
expect(_and (eq (compute_answer (), 42), eq (compute_float (), 42.0)));
```

@note
If operands are function comparators, it is recommended to
use the overloaded logical operators `&&`, `||`, `!` available
in the `micro_test_plus::operators` namespace.

*/
-------------------------------------------------------------------------------
/**

@defgroup mtp-exceptions Checking exceptions
@brief  Functions to check exceptions.
@details

A C++ testing framework must be able to check if an expression (usually a function call), throws or not an exception.

@par Examples

```cpp
expect (throws ([] { exercise_throw (true); })) << "exception thrown";

expect (throws<std::runtime_error> ([] { throw std::runtime_error{ "" }; }))
        << "std::runtime_error thrown";

expect (nothrow ([] { exercise_throw (false); })) << "exception not thrown";
```

If a more elaborate logic is required, for example for expecting multiple
exceptions, use an explicit `try` with multiple `catch` statements and
report the results with `expect(true)` or `expect(false)`.

```cpp
try
  {
    compute_answer ();
  }
catch (const std::overflow_error& e)
  {
    expect (true) << "std::overflow_error thrown";
  }
catch (const std::runtime_error& e)
  {
    expect (true) << "std::runtime_error thrown";
  }
catch (...)
  {
    expect (false) << "known exception thrown";
  }
```

*/
-------------------------------------------------------------------------------
/**

@defgroup mtp-operators Operators
@brief Overloaded operators
@details

As in most other C++ test frameworks, it is also possible to
overload the `==`, `!=`, `<`, `>`, `<=`, `>=` operators.

To avoid possible interferences with other operators defined by the
application, these operators match only for operands of specific
types and are located in a separate namespace
(`micro_test_plus::operators`); when applied to regular values,
the standard operands are used; the comparisons are performed
properly, but in case of failures the actual values are not shown.

The operators match only operands derived from the local
`detail::op` type, which can be enforced for constant values
by using the provided literals (like `1_i`) or, for dynamic values,
by using the provided casts (like `_i` {expression}, which are
actually the constructors of the internal classes).

@par Examples

```cpp
test_case ("Operators", [] {
  using namespace micro_test_plus::operators;
  using namespace micro_test_plus::literals;

  expect (compute_answer () == 42_i) << "answer is 42 (with literal)";
  expect (_i {compute_answer ()} == 42) << "answer is 42 (with cast)";
  expect (compute_answer () != 43_i) << "answer is not 43";
  expect (compute_answer () < 43_i) << "answer is < 43";
  expect (compute_answer () <= 43_i) << "answer is <= 42";
  expect (compute_answer () > 41_i) << "answer is > 43";
  expect (compute_answer () >= 42_i) << "answer is >= 42";
});
```

## Logical operators

The logical operators can be used in exactly the same way as
standard operators, but the additional functionality is
enabled only when matching the typed operands.

@par Example

```cpp
expect (compute_answer () == 42_i && compute_float () == 42.0_f);
```

*/
-------------------------------------------------------------------------------
/**

@defgroup mtp-comparing-strings Strings operators
@brief Overloaded operators to compare strings.
@details

In addition to the generic operators,
there are also equality operators for `string_view`
objects.

@par Examples

```cpp
#include <string_view>
using namespace std::literals; // For the "sv" literal.
// ...

test_case ("Operators", [] {
  using namespace micro_test_plus::operators;

  expect (std::string_view{ compute_ultimate_answer () } == "forty-two"sv)
          << "ultimate answer == 'forty-two'";
});
```

*/
-------------------------------------------------------------------------------
/**

@defgroup mtp-comparing-containers Container operators
@brief Overloaded operators to compare containers.
@details

In addition to the generic operators,
there are also equality operators for containers.

@par Examples

```cpp
#include <string_view>
using namespace std::literals; // For the "sv" literal.
// ...

test_case ("Operators", [] {
  using namespace micro_test_plus::operators;

  expect (std::vector<int>{ 1, 2 } == std::vector<int>{ 1, 2 })
          << "vector{ 1, 2 } == vector{ 1, 2 }";

  expect (std::vector<int>{ 1, 2, 3 } != std::vector<int>{ 1, 2, 4 })
          << "vector{ 1, 2, 3 } != vector{ 1, 2, 4 }";
});
```

*/
-------------------------------------------------------------------------------
/**

@defgroup mtp-literals Literals and wrappers
@brief Literals and wrappers.
@details

For converting constants to recognised typed operands, the framework
defines several literal operators in the separate namespace `literals`.

Similarly, for dynamic values, there are wrappers that convert them to
recognised types.

@par Examples

```cpp
expect (_i {answer} == 42_i);
expect (_f {expression} == 42_f);
```

*/
-------------------------------------------------------------------------------
/**

@defgroup mtp-functions-vs-operators Functions vs. operators & literals
@details

Which to use, functions like `eq()` or the
overloaded operators? A very good question!

Functions guarantee that the nice feature of showing the actual values
when expectations fail is always available. Also the syntax is more on the
traditional side, and for some it may look simpler and easier to read.

Operators are generally easier to recognise than function calls,
but require the hack with the type wrappers and literals to enforce the
types, otherwise the actual values will not be displayed when the
expectations fail.

Both syntaxes are functional, and, once the differences understood,
the issue is a matter of personal preferences.

@note
The µOS++ projects favour explicit comparator functions.

*/
-------------------------------------------------------------------------------
/**

@defgroup mtp-utility-functions Utility functions
@brief Functions to assist in string operations.

*/
-------------------------------------------------------------------------------
/**

@defgroup mtp-custom-types Custom-types
@details

It is possible to extend the comparators with templates matching custom
types, but this is a non-trivial task and requires a good knowledge of
C++.

@todo Explain how to do this and add a test.

*/
-------------------------------------------------------------------------------
/**

@defgroup mtp-test-suites Test suites
@brief Test suites are named sequences of test cases.
@details

The test cases defined in `main()` are considered to be part of
the default (or main) test suite, and are executed immediately
when invoked.

For complex applications there can be multiple test
suites, usually in separate source files.

In order to make self-registration possible, test suites are classes,
constructed with a name, a callable (usually a lambda
which chains the execution of the test cases) and optional
arguments:

```cpp
class test_suite : public test_suite_base
{
public:
  template <typename Callable_T, typename... Args_T>
  test_suite (const char* name, Callable_T&& callable,
              Args_T&&... arguments);
  // ...
}
```

@note
It is recommended to instantiate the test suites as static objects.

The self-registration is done in the constructor.
Test suites defined in different compilation units can be executed in any
order (since the order in which the
static constructors are invoked is not specified);
thus there should be no dependencies between test suites.

The registered test suites are executed when the function
`exit_code()` is invoked.

@par Examples

```cpp
// Test suite with generic parameters.
static void
test_suite_args (int ic, int iv, int& ir, int* ip1, int* ip2)
{
  using namespace micro_os_plus::micro_test_plus;

  test_case ("args", [&] {
    expect (eq (ic, 42)) << "ic is 42";
    expect (eq (iv, 43)) << "iv is 43";
    expect (eq (ir, 44)) << "ir is 44";
    expect (eq (*ip1, 45)) << "*ip1 is 45";
    expect (eq (*ip2, 46)) << "*ip2 is 46";
  });
}

static int in = 43;
static int in44 = 44;
static int& ir = in44;
static int in45 = 45;
static int in46 = 46;
static int* ip2 = &in46;

static micro_os_plus::micro_test_plus::test_suite ts_args
    = { "Args", test_suite_args, 42, in, ir, &in45, ip2 };
```

*/
-------------------------------------------------------------------------------
/**

@defgroup mtp-explicit-namespaces Explicit namespaces
@details

In complex projects, the definitions in the
`micro_test_plus` namespace might interfere with application definitions.

@note
To avoid names clashes, it is recommended to
use the comparator functions with explicit namespaces,
possibly aliased to shorter names.

@par Example

```cpp
{
  namespace mt = micro_os_plus::micro_test_plus;

  mt::test_case ("Check answer", [] {
    mt::expect (mt::eq (compute_answer (), 42)) << "answer is 42";
  });
}
```

*/
-------------------------------------------------------------------------------
/**

@defgroup mtp-memory-footprint Memory footprint
@details

The memory footprint of unit tests based on µTest++ is definitely smaller than
that of traditional C++ testing framework, mainly because the `iostream`
library is not used.

However, the use of templates for implementing the comparators and
operators should be carefully observed for platforms with really
limited amounts of memory, since each pair of different operands
contributes to the program size.

At the limit, µTest++ can be used
without custom comparators and operators
(only with regular boolean expressions), and still be able to provide
the basic functionality of testing various conditions, but without
the optional features of displaying the actual values compared.

@note
The memory footprint on `debug` (built with `-O0`),
is significantly larger than on `release`. If necessary, the optimization
for the `debug` build can be increased to `-Og`, to save some memory.

*/
-------------------------------------------------------------------------------
/**

@}

*/
-------------------------------------------------------------------------------

